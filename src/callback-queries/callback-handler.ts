import { bot } from '../config/bot'
import { currencies } from '../keyboards/inline-keyboards/currencies.inline'
import { inlineKeyboardForSettings } from '../keyboards/inline-keyboards/keyboard-for-settings.inline'
import { previousButton } from '../keyboards/inline-keyboards/previous-button.inline'
import { createWallet } from '../trust-wallet/create-wallet'

import { Networks } from 'bitcore-lib'
import { InlineKeyboardButton } from 'telegraf/typings/core/types/typegram'
import { getMyContracts } from '../callbacks/get-my-contracts'
import { requisites } from '../callbacks/requisites'
import { transferHistory } from '../callbacks/transfer-history'
import { marketKeyboard } from '../keyboards/inline-keyboards/p2p-keyboard.inline'
import { startInlineKeyboards } from '../keyboards/inline-keyboards/start-keyboard.inline'
import { walletInlineKeyboard } from '../keyboards/inline-keyboards/wallet.inline'
import { prisma } from '../prisma/prisma.client'
import currencyService from '../service/currency.service'
import { getWalletBalance } from '../trust-wallet/get-balance'
import { replenishBtc } from '../trust-wallet/replenish-coin'
import { sendCoin } from '../trust-wallet/send-coin'
import { currencyFormatter } from '../utils/currency-formatter'

export const callbackHandler = () => {
	bot.on('callback_query', async query => {
		// @ts-ignore
		const data = query.update.callback_query?.data
		console.log(query.update.callback_query.from.id.toString())
		const user = await prisma.user.findFirst({
			where: {
				id: query.update.callback_query.from.id.toString(),
			},
		})

		switch (data) {
			case 'settings':
				try {
					return query.editMessageText(
						`<b>üîß BitLimix | –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í–∞—à–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –≤ –±–æ—Ç–µ: <b>${user?.login}</b>\n\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: inlineKeyboardForSettings,
							},
						}
					)
				} catch (error) {
					return query.reply(String(error))
				}
			case 'add_requisite':
				try {
					return query.scene.enter('select_currency')
				} catch (error) {
					return query.reply('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
				}
			case 'transfer_btc':
				try {
					return query.scene.enter('transfer')
				} catch (error) {
					return query.reply(String(error))
				}
			case 'replenish_btc':
				try {
					return query.scene.enter('replenish')
				} catch (error) {
					return query.reply(String(error))
				}
			case 'decline':
				query.session = {}
				query.scene.leave()
				return query.scene.enter('transfer')

			case 'confirm':
				const transfer = sendCoin(
					query.from.id,
					// @ts-ignore
					query.session.recipientAddress,
					// @ts-ignore
					query.session.countBTC,
					Networks.mainnet
				)
				console.log(transfer)
				query.session = {}
				query.scene.leave()
				return
			case 'decline_replenish':
				query.session = {}
				query.scene.leave()
				return query.scene.enter('replenish')
			case 'confirm_replenish':
				query.deleteMessage()
				const replenish = replenishBtc(
					query.from.id,
					// @ts-ignore
					query.session.privateKey,
					// @ts-ignore
					query.session.sourceAddress,
					// @ts-ignore
					query.session.countBTC,
					Networks.mainnet
				)
				console.log(replenish)
				query.session = {}
				query.scene.leave()
				return
			case 'transfer_history':
				return transferHistory(query)
			case 'requisites':
				return requisites(query)
			case 'p2p_transfer':
				return query.editMessageText(
					`<strong>üí± BitLimix | –ú–∞—Ä–∫–µ—Ç</strong>\n\nüí† –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫.\nüõ° –ë–æ—Ç –≤—ã—Å—Ç—É–ø–∞–µ—Ç –≥–∞—Ä–∞–Ω—Ç–æ–º –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–æ–Ω–µ—Ç—ã –Ω–∞ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏. –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É ‚Äì 0%, –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ‚Äì 1%.`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: marketKeyboard,
						},
					}
				)
			case 'main_menu':
				try {
					return query.editMessageText(
						`<b>üí∞ BitLimix | –ú–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: startInlineKeyboards,
							},
						}
					)
				} catch (error) {
					return query.reply(String(error))
				}
			case 'set_currency':
				try {
					const buttons = await currencies()
					return query.editMessageText(
						'<b>üíµ BitLimix | –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–±–ª—é–¥–∞—Ç—å:',
						{
							reply_markup: {
								inline_keyboard: [...buttons, previousButton('settings')],
							},
							parse_mode: 'HTML',
						}
					)
				} catch (error) {
					return query.reply(String(error))
				}
			case 'course_currency':
				try {
					const userCurrency = await prisma.user.findFirst({
						where: {
							id: query.from.id.toString(),
						},
						include: {
							currency: true,
						},
					})
					if (!userCurrency?.currency) {
						// @ts-ignore
						const buttons = await currencies()
						return query.editMessageText(
							`<b>üìä BitLimix | –ö—É—Ä—Å</b>\n\n–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –µ–µ`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: userCurrency?.isAdmin
										? [
												...buttons,
												[
													{
														text: '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É',
														callback_data: 'set_currency',
													},
												],
												previousButton('settings'),
										  ]
										: [...buttons, previousButton('settings')],
								},
							}
						)
					}
					const currency = await currencyService.getCurrency('bitcoin')
					return query.editMessageText(
						`<b>üìä BitLimix | –ö—É—Ä—Å ${
							userCurrency?.currency.value
						}</b>\n\n<b>EUR:</b> ${currencyFormatter(
							currency?.bitcoin.eur!,
							'eur'
						)} ‚Ç¨\n<b>USD:</b> ${currencyFormatter(
							currency?.bitcoin.usd!,
							'usd'
						)} $\n<b>RUB:</b> ${currencyFormatter(
							currency?.bitcoin.rub!,
							'rub'
						)} ‚ÇΩ`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [previousButton('settings')],
							},
						}
					)
				} catch (error) {
					return query.reply(String(error))
				}
			case 'bitcoin-add':
				try {
					// @ts-ignore
					const coinSplit = query.update.callback_query?.data.split('-')
					const currencyFind = await prisma.currency.findFirst({
						where: {
							key: coinSplit[0],
						},
					})
					if (!currencyFind) {
						return query.editMessageText(
							'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞–ª—é—Ç—ã',
							{
								parse_mode: 'HTML',

								reply_markup: {
									inline_keyboard: [previousButton('settings')],
								},
							}
						)
					}
					await prisma.user.update({
						where: {
							id: query.from.id.toString(),
						},
						data: {
							currency: {
								connect: {
									id: currencyFind.id,
								},
							},
						},
					})
					return query.editMessageText(
						`–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–µ–±–µ –≤–∞–ª—é—Ç—É ${currencyFind.value}`,
						{
							parse_mode: 'HTML',

							reply_markup: {
								inline_keyboard: [previousButton('settings')],
							},
						}
					)
				} catch (error) {
					return query.reply(String(error))
				}
			case 'history_transfer':
				console.log('enter to transfer history callback')
				return transferHistory(query)
			case 'buy':
				const getUserForBuy = await prisma.user.findFirst({
					where: {
						id: query.from.id.toString(),
					},
					include: {
						wallet: true,
					},
				})
				const userBalanceForBuy = await getWalletBalance(
					getUserForBuy?.wallet?.address
				)
				if (userBalanceForBuy === 0)
					return query.answerCbQuery(
						'üö´ –ë–∞–ª–∞–Ω—Å –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ BTC.',
						{
							show_alert: true,
						}
					)
				const paymentMethodsForBuy = await prisma.paymentMethod.findMany()
				const paymentMethodButtonForBuy: InlineKeyboardButton[][] =
					paymentMethodsForBuy.map(paymentMethod => {
						return [
							{
								callback_data: `buy_payment_method_${paymentMethod.id}`,
								text: paymentMethod.name,
							},
						]
					})
				return query.editMessageText(
					`–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC –∑–∞ RUB.`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								...paymentMethodButtonForBuy,
								previousButton('p2p_transfer'),
							],
						},
					}
				)
			case 'profile':
				const userForProfile = await prisma.user.findFirst({
					where: {
						id: query.from.id.toString(),
					},
					include: {
						Contract: true,
					},
				})
				return query.editMessageText(
					`üë§ <b>${userForProfile?.username}</b> ${
						userForProfile?.isAdmin ? '[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä]' : ''
					}\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏</b>\nüìà <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫:</i> <b>${
						userForProfile?.Contract.length
					}</b>`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [previousButton('p2p_transfer')],
						},
					}
				)
			case 'sell':
				const getUser = await prisma.user.findFirst({
					where: {
						id: query.from.id.toString(),
					},
					include: {
						wallet: true,
					},
				})
				const userBalance = await getWalletBalance(getUser?.wallet?.address)

				if (userBalance === 0)
					return query.answerCbQuery(
						'üö´ –ë–∞–ª–∞–Ω—Å –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ BTC.',
						{
							show_alert: true,
						}
					)
				const paymentMethods = await prisma.paymentMethod.findMany()
				const paymentMethodButton: InlineKeyboardButton[][] =
					paymentMethods.map(paymentMethod => {
						return [
							{
								callback_data: `sell_payment_method_${paymentMethod.id}`,
								text: paymentMethod.name,
							},
						]
					})
				return query.editMessageText(
					`–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ BTC –∑–∞ RUB.`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								...paymentMethodButton,
								previousButton('p2p_transfer'),
							],
						},
					}
				)
			case 'add_my_contract':
				return query.scene.enter('add_contract')
			case 'my_ads':
				return getMyContracts(query)
			case 'wallet':
				try {
					const wallet = await createWallet(query.from.id)
					if (!wallet) {
						const userWallet = await prisma.user.findFirst({
							where: {
								id: query.from.id.toString(),
							},
							include: {
								wallet: true,
							},
						})
						if (userWallet) {
							const balance = await getWalletBalance(userWallet.wallet?.address)

							return query.editMessageText(
								`<b>üëõ BitLimix | –ö–æ—à–µ–ª–µ–∫</b>\n\n–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ <b>${balance} BTC</b>.\n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: <code><b>${userWallet.wallet?.address}</b></code>\n–ú–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞: <code>${userWallet.wallet?.mnemonicPhrase}</code>\n–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: <code>${userWallet.wallet?.privateKey}</code>`,
								{
									parse_mode: 'HTML',

									reply_markup: {
										inline_keyboard: [
											...walletInlineKeyboard,
											[
												...previousButton('main_menu'),
												{
													callback_data: 'history_transfer',
													text: '‚è±Ô∏è –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤',
												},
											],
										],
									},
								}
							)
						}
						return query.editMessageText('–£ –í–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω –∫–æ—à–µ–ª–µ–∫', {
							parse_mode: 'Markdown',
							reply_markup: {
								inline_keyboard: [previousButton('main_menu')],
							},
						})
					}
					return query.editMessageText(
						`<b>–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω</b>\n–ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: <code>${wallet}</code>`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [previousButton('main_menu')],
							},
						}
					)
				} catch (error) {
					return query.reply(String(error))
				}
		}
		const matchRequisite = data.match(/^requisite_(\d+)$/)
		const matchSellPaymentMethod = data.match(/^sell_payment_method_(\d+)$/)
		const matchBuyPaymentMethod = data.match(/^buy_payment_method_(\d+)$/)
		const matchDeleteRequisite = data.match(/^delete_requisite_(\d+)$/)
		if (matchDeleteRequisite) {
			const itemId = Number(matchDeleteRequisite[1])
			await prisma.requisite.delete({
				where: {
					id: itemId,
				},
			})
			await query.editMessageText(`–†–µ–∫–≤–∏–∑–∏—Ç—ã —É–¥–∞–ª–µ–Ω—ã.`, {
				parse_mode: 'HTML',
				reply_markup: {
					inline_keyboard: [previousButton('requisites')],
				},
			})
		}
		if (matchSellPaymentMethod) {
			const itemId = Number(matchSellPaymentMethod[1])
			const user = await prisma.user.findFirst({
				where: {
					id: query.from.id.toString(),
				},
				include: {
					Requisite: {
						include: {
							paymentMethod: true,
						},
					},
				},
			})
			const paymentMethod = await prisma.paymentMethod.findFirst({
				where: {
					id: itemId,
				},
			})
			if (
				user?.Requisite.find(
					requisite => requisite.paymentMethod.id === paymentMethod?.id
				)
			) {
				const contracts = await prisma.contract.findMany({
					where: {
						paymentMethodId: paymentMethod?.id,
						type: 'sell',
					},
					include: {
						author: true,
					},
				})
				const contractsButtons: InlineKeyboardButton[][] = contracts.map(
					contract => {
						return [
							{
								callback_data: `contract_${contract.id}`,
								text: `${contract.author.username} | ${parseFloat(
									String(contract.amount)
								)} BTC | ${contract.price} RUB –∑–∞ —à—Ç.`,
							},
						]
					}
				)
				return query.editMessageText(
					`üí≥ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å BTC –∑–∞ RUB —á–µ—Ä–µ–∑ ${paymentMethod?.name}.`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [...contractsButtons, previousButton('sell')],
						},
					}
				)
			}
			return query.answerCbQuery(
				'üö´ –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –±–∞–Ω–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏',
				{
					show_alert: true,
				}
			)
		}
		if (matchBuyPaymentMethod) {
			const itemId = Number(matchBuyPaymentMethod[1])
			const user = await prisma.user.findFirst({
				where: {
					id: query.from.id.toString(),
				},
				include: {
					Requisite: {
						include: {
							paymentMethod: true,
						},
					},
				},
			})
			const paymentMethod = await prisma.paymentMethod.findFirst({
				where: {
					id: itemId,
				},
			})
			if (
				user?.Requisite.find(
					requisite => requisite.paymentMethod.id === paymentMethod?.id
				)
			) {
				const contracts = await prisma.contract.findMany({
					where: {
						paymentMethodId: paymentMethod?.id,
						type: 'buy',
					},
					include: {
						author: true,
					},
				})
				const contractsButtons: InlineKeyboardButton[][] = contracts.map(
					contract => {
						return [
							{
								callback_data: `contract_${contract.id}`,
								text: `${contract.author.username} | ${parseFloat(
									String(contract.amount)
								)} BTC | ${contract.price} RUB –∑–∞ —à—Ç.`,
							},
						]
					}
				)
				return query.editMessageText(
					`üí≥ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å BTC –∑–∞ RUB —á–µ—Ä–µ–∑ ${paymentMethod?.name}.`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [...contractsButtons, previousButton('buy')],
						},
					}
				)
			}
			return query.answerCbQuery(
				'üö´ –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –±–∞–Ω–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏',
				{
					show_alert: true,
				}
			)
		}
		if (matchRequisite) {
			const itemId = matchRequisite[1]
			const requisite = await prisma.requisite.findFirst({
				where: {
					id: Number(itemId),
				},
				include: {
					paymentMethod: true,
				},
			})
			// –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∞—à–∏–º itemId
			if (requisite) {
				await query.editMessageText(
					`<b>–ü–ª–∞—Ç—ë–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>\n\n–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: <code>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥</code>\n–í–∞–ª—é—Ç–∞: <code>${requisite.currency}</code>\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <code>${requisite.paymentMethod.name}</code>\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>${requisite.phoneOrbankCardNumber}</code>`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										callback_data: `delete_requisite_${requisite.id}`,
										text: '‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã',
									},
								],
								previousButton('requisites'),
							],
						},
					}
				)
			}
		}
	})
}
