import { bot } from '../config/bot'
import { currencies } from '../keyboards/inline-keyboards/currencies.inline'
import { inlineKeyboardForSettings } from '../keyboards/inline-keyboards/keyboard-for-settings.inline'
import { previousButton } from '../keyboards/inline-keyboards/previous-button.inline'
import { createWallet } from '../trust-wallet/create-wallet'

import { Networks } from 'bitcore-lib'
import { InlineKeyboardButton } from 'telegraf/typings/core/types/typegram'
import { getMyContracts } from '../callbacks/get-my-contracts'
import { myCodes } from '../callbacks/my-codes'
import { requisites } from '../callbacks/requisites'
import { transferHistory } from '../callbacks/transfer-history'
import { config } from '../config/service.config'
import { marketKeyboard } from '../keyboards/inline-keyboards/p2p-keyboard.inline'
import { promoCodesButtons } from '../keyboards/inline-keyboards/promo-codes'
import { startInlineKeyboards } from '../keyboards/inline-keyboards/start-keyboard.inline'
import { walletInlineKeyboard } from '../keyboards/inline-keyboards/wallet.inline'
import { prisma } from '../prisma/prisma.client'
import currencyService from '../service/currency.service'
import { getWalletBalance } from '../trust-wallet/get-balance'
import { replenishBtc } from '../trust-wallet/replenish-coin'
import { sendCoin } from '../trust-wallet/send-coin'
import { currencyFormatter } from '../utils/currency-formatter'
import { dateFormat } from '../utils/format-date'

export const callbackHandler = () => {
	bot.on('callback_query', async query => {
		try {
			// @ts-ignore
			const data = query.update.callback_query?.data
			console.log(query.update.callback_query.from.id.toString())
			const user = await prisma.user.findFirst({
				where: {
					id: query.update.callback_query.from.id.toString(),
				},
			})

			switch (data) {
				case 'settings':
					try {
						return query.editMessageText(
							`<b>üîß ${config.shopName} | –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í–∞—à–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –≤ –±–æ—Ç–µ: <b>${user?.login}</b>\n\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: inlineKeyboardForSettings,
								},
							}
						)
					} catch (error) {
						return query.reply(String(error))
					}
				case 'promo':
					try {
						const myCodes = await prisma.code.findMany({
							where: {
								creatorId: query.from.id.toString(),
							},
						})
						return query.reply('üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞–º–∏', {
							reply_markup: {
								inline_keyboard: promoCodesButtons(myCodes.length),
							},
						})
					} catch (error) {
						console.error(error)
					}
				case 'activate_code':
					return query.scene.enter('activate-promo')
				case 'promo_information':
					try {
						return query.editMessageText(
							`‚ÑπÔ∏è –û ${config.shopName} Codes\n–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –∫–æ–¥–∞–º–∏ ${config.shopName} Code\n${config.shopName} Code  - —ç—Ç–æ –∫–æ–¥ –Ω–∞ —Å—É–º–º—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª—é–±—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${config.shopName}\n–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–∞, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤–∞–º–∏ —Å—É–º–º–∞ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤ –¥–µ–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –∫–æ–¥ –Ω–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n–°—É–º–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø–æ–∫—É–ø–∫—É\n–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫—É —Å –∫–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–º–µ—é—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ ${config.shopName}. –ö–∞–∂–¥—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: [previousButton('promo')],
								},
							}
						)
					} catch (error) {
						console.error(error)
					}
				case 'add_requisite':
					try {
						return query.scene.enter('select_currency')
					} catch (error) {
						return query.reply('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
					}
				case 'transfer_btc':
					try {
						return query.scene.enter('transfer')
					} catch (error) {
						return query.reply(String(error))
					}
				case 'replenish_btc':
					try {
						const userWallet = await prisma.user.findFirst({
							where: {
								id: query.from.id.toString(),
							},
							include: {
								wallet: true,
							},
						})
						return query.editMessageText(
							`‚ùóÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è Bitcoin: <b>0.0010 BTC</b>.\n\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –º–µ–Ω—å—à–µ <b>0.0010 BTC</b>, —Ç–æ –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.\n\n–ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: <code>${userWallet?.wallet?.address}</code>`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: [
										[
											{
												callback_data: 'main_menu',
												text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
											},
										],
									],
								},
							}
						)
					} catch (error) {
						return query.reply(String(error))
					}
				case 'decline':
					query.session = {}
					query.scene.leave()
					return query.scene.enter('transfer')
				case 'contacts_note':
					const contacts = await prisma.addressBook.findMany({
						where: {
							userId: query.from?.id.toString(),
						},
					})
					const contactsButtons: InlineKeyboardButton[] = []
					contacts.forEach(contact => {
						contactsButtons.push({
							callback_data: `address-contact-${contact.id}`,
							text: contact.name,
						})
					})
					return query.editMessageText('üìÉ –ê–¥—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥–∞ –¥–ª—è BTC', {
						reply_markup: {
							inline_keyboard: [
								contactsButtons,
								[
									{ callback_data: 'create-address', text: '–°–æ–∑–¥–∞—Ç—å' },
									...previousButton('wallet'),
								],
							],
						},
					})
				case 'create-address':
					return query.scene.enter('address-book')
				case 'confirm':
					const transfer = sendCoin(
						query.from.id,
						// @ts-ignore
						query.session.recipientAddress,
						// @ts-ignore
						query.session.countBTC,
						Networks.mainnet
					)
					console.log(transfer)
					query.session = {}
					query.scene.leave()
					return
				case 'decline_replenish':
					query.session = {}
					query.scene.leave()
					return query.scene.enter('replenish')
				case 'confirm_replenish':
					query.deleteMessage()
					const replenish = replenishBtc(
						query.from.id,
						// @ts-ignore
						query.session.privateKey,
						// @ts-ignore
						query.session.sourceAddress,
						// @ts-ignore
						query.session.countBTC,
						Networks.mainnet
					)
					console.log(replenish)
					query.session = {}
					query.scene.leave()
					return
				case 'transfer_history':
					return transferHistory(query)
				case 'requisites':
					return requisites(query)
				case 'p2p_transfer':
					return query.editMessageText(
						`<strong>üí± ${config.shopName} | üí± –û–±–º–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</strong>\n\n
		–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n\n–ú—ã –≤—ã—Å—Ç—É–ø–∞–µ–º –≤ —Ä–æ–ª–∏ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞, —É–¥–µ—Ä–∂–∏–≤–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.\n–≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–∞–∫ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞, —Ç–∞–∫ –∏ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–ª—é—á–∞—Ç—å —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.
		`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: marketKeyboard,
							},
						}
					)
				case 'main_menu':
					try {
						return query.editMessageText(
							`<b>üí∞ ${config.shopName} | –ú–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: startInlineKeyboards,
								},
							}
						)
					} catch (error) {
						return query.reply(String(error))
					}
				case 'set_currency':
					try {
						const buttons = await currencies()
						return query.editMessageText(
							`<b>üíµ ${config.shopName} | –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–±–ª—é–¥–∞—Ç—å:`,
							{
								reply_markup: {
									inline_keyboard: [...buttons, previousButton('settings')],
								},
								parse_mode: 'HTML',
							}
						)
					} catch (error) {
						return query.reply(String(error))
					}
				case 'course_currency':
					try {
						const userCurrency = await prisma.user.findFirst({
							where: {
								id: query.from.id.toString(),
							},
							include: {
								currency: true,
							},
						})
						if (!userCurrency?.currency) {
							// @ts-ignore
							const buttons = await currencies()
							return query.editMessageText(
								`<b>üìä ${config.shopName} | –ö—É—Ä—Å</b>\n\n–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –µ–µ`,
								{
									parse_mode: 'HTML',
									reply_markup: {
										inline_keyboard: userCurrency?.isAdmin
											? [
													...buttons,
													[
														{
															text: '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É',
															callback_data: 'set_currency',
														},
													],
													previousButton('settings'),
											  ]
											: [...buttons, previousButton('settings')],
									},
								}
							)
						}
						const currency = await currencyService.getCurrency('bitcoin')
						return query.editMessageText(
							`<b>üìä ${config.shopName} | –ö—É—Ä—Å ${
								userCurrency?.currency.value
							}</b>\n\n<b>EUR:</b> ${currencyFormatter(
								currency?.bitcoin.eur!,
								'eur'
							)} ‚Ç¨\n<b>USD:</b> ${currencyFormatter(
								currency?.bitcoin.usd!,
								'usd'
							)} $\n<b>RUB:</b> ${currencyFormatter(
								currency?.bitcoin.rub!,
								'rub'
							)} ‚ÇΩ`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: [previousButton('settings')],
								},
							}
						)
					} catch (error) {
						return query.reply(String(error))
					}
				case 'bitcoin-add':
					try {
						// @ts-ignore
						const coinSplit = query.update.callback_query?.data.split('-')
						const currencyFind = await prisma.currency.findFirst({
							where: {
								key: coinSplit[0],
							},
						})
						if (!currencyFind) {
							return query.editMessageText(
								'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞–ª—é—Ç—ã',
								{
									parse_mode: 'HTML',

									reply_markup: {
										inline_keyboard: [previousButton('settings')],
									},
								}
							)
						}
						await prisma.user.update({
							where: {
								id: query.from.id.toString(),
							},
							data: {
								currency: {
									connect: {
										id: currencyFind.id,
									},
								},
							},
						})
						return query.editMessageText(
							`–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–µ–±–µ –≤–∞–ª—é—Ç—É ${currencyFind.value}`,
							{
								parse_mode: 'HTML',

								reply_markup: {
									inline_keyboard: [previousButton('settings')],
								},
							}
						)
					} catch (error) {
						return query.reply(String(error))
					}
				case 'history_transfer':
					console.log('enter to transfer history callback')
					return transferHistory(query)
				case 'create_code':
					return query.scene.enter('create-promo')
				case 'buy':
					const getUserForBuy = await prisma.user.findFirst({
						where: {
							id: query.from.id.toString(),
						},
						include: {
							wallet: true,
						},
					})

					const userBalanceForBuy = await getWalletBalance(
						getUserForBuy?.wallet?.address
					)
					// if (userBalanceForBuy === 0)
					// 	return query.answerCbQuery(
					// 		'üö´ –ë–∞–ª–∞–Ω—Å –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ BTC.',
					// 		{
					// 			show_alert: true,
					// 		}
					// 	)
					const paymentMethodsForBuy = await prisma.paymentMethod.findMany({
						include: {
							Contract: {
								where: {
									type: 'buy',
								},
							},
						},
					})
					const paymentMethodButtonForBuy: InlineKeyboardButton[][] =
						paymentMethodsForBuy.map(paymentMethod => {
							return [
								{
									callback_data: `buy_payment_method_${paymentMethod.id}`,
									text: `${paymentMethod.name} | [${paymentMethod.Contract.length}]`,
								},
							]
						})
					return query.editMessageText(
						`–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC –∑–∞ RUB.`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [
									...paymentMethodButtonForBuy,
									previousButton('p2p_transfer'),
								],
							},
						}
					)
				case 'profile':
					const userForProfile = await prisma.user.findFirst({
						where: {
							id: query.from.id.toString(),
						},
						include: {
							Contract: true,
						},
					})
					return query.editMessageText(
						`üë§ <b>${userForProfile?.username}</b> ${
							userForProfile?.isAdmin ? '[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä]' : ''
						}\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏</b>\nüìà <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫:</i> <b>${
							userForProfile?.Contract.length
						}</b>`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [previousButton('p2p_transfer')],
							},
						}
					)
				case 'sell':
					const getUser = await prisma.user.findFirst({
						where: {
							id: query.from.id.toString(),
						},
						include: {
							wallet: true,
						},
					})
					const userBalance = await getWalletBalance(getUser?.wallet?.address)

					// if (userBalance === 0)
					// 	return query.answerCbQuery(
					// 		'üö´ –ë–∞–ª–∞–Ω—Å –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ BTC.',
					// 		{
					// 			show_alert: true,
					// 		}
					// 	)
					const paymentMethods = await prisma.paymentMethod.findMany({
						include: {
							Contract: {
								where: {
									type: 'sell',
								},
							},
						},
					})
					const paymentMethodButton: InlineKeyboardButton[][] =
						paymentMethods.map(paymentMethod => {
							return [
								{
									callback_data: `sell_payment_method_${paymentMethod.id}`,
									text: `${paymentMethod.name} | [${paymentMethod.Contract.length}]`,
								},
							]
						})
					return query.editMessageText(
						`–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ BTC –∑–∞ RUB.`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [
									...paymentMethodButton,
									previousButton('p2p_transfer'),
								],
							},
						}
					)
				case 'add_my_contract':
					return query.scene.enter('add_contract')
				case 'buy_contract':
					return query.scene.enter('buy-contract', {
						// @ts-ignore
						id: query.scene.state.contractId,
					})
				case 'my_ads':
					return getMyContracts(query)
				case 'my_codes':
					return myCodes(query)
				case 'wallet':
					try {
						const registrationDate = new Date(user?.createdAt!)
						const currentDate = new Date()
						const diffInMs = currentDate.getTime() - registrationDate.getTime()
						const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24))
						const wallet = await createWallet(query.from.id)
						const balance = await getWalletBalance(wallet)
						const convertToRuble = await currencyService.convertRubleToBTC(
							balance!
						)
						const contractTransactions =
							await prisma.contractTransaction.findMany({
								where: {
									sellerId: query.from.id.toString(),
								},
							})
						if (!wallet) {
							const userWallet = await prisma.user.findFirst({
								where: {
									id: query.from.id.toString(),
								},
								include: {
									wallet: true,
								},
							})
							if (userWallet) {
								const balance = await getWalletBalance(
									userWallet.wallet?.address
								)
								const convertToRuble = await currencyService.convertRubleToBTC(
									balance!
								)
								return query.editMessageText(
									`üè¶ <b>${
										config.shopName
									}</b>\n\n<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${balance} BTC ‚âà ${convertToRuble} RUB\n\n<b>–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏:</b> ${
										user?.totalAmountAdd
									} BTC\n<b>–í—ã –≤—ã–≤–µ–ª–∏:</b> ${
										user?.totalAmountReplenish
									} BTC\n\n<b>–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –±–æ—Ç–∞:</b> ${
										user?.login
									}\n\n<b>–û—Ç–∑—ã–≤—ã –æ –≤–∞—Å:</b> (0)üëç (0)üëé\n\n<b>–î–Ω–µ–π –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ:</b> ${diffInDays}\n<b>–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ —É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> ${
										contractTransactions.length
									} –Ω–∞ —Å—É–º–º—É ${contractTransactions.reduce(
										(currentSum, currentTransaction) =>
											currentSum + currentTransaction.amount,
										0
									)} BTC\n<b>–í—ã –∑–∞—â–∏—â–µ–Ω—ã –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –æ—Ç –≤–∑–ª–æ–º–∞ –∏ –∫—Ä–∞–∂–∏ –≤–∞—à–∏—Ö BTC.</b>`,
									{
										parse_mode: 'HTML',

										reply_markup: {
											inline_keyboard: [
												...walletInlineKeyboard,
												[
													...previousButton('main_menu'),
													{
														callback_data: 'history_transfer',
														text: '‚è±Ô∏è –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤',
													},
												],
											],
										},
									}
								)
							}
							return query.editMessageText('–£ –í–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω –∫–æ—à–µ–ª–µ–∫', {
								parse_mode: 'Markdown',
								reply_markup: {
									inline_keyboard: [previousButton('main_menu')],
								},
							})
						}
						return query.editMessageText(
							`üè¶ <b>${
								config.shopName
							}</b>\n\n<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${balance} BTC ‚âà ${convertToRuble} RUB\n\n<b>–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏:</b> ${
								user?.totalAmountAdd
							} BTC\n<b>–í—ã –≤—ã–≤–µ–ª–∏:</b> ${
								user?.totalAmountReplenish
							} BTC\n\n<b> —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –±–æ—Ç–∞:</b> ${
								user?.login
							}\n\n<b>–û—Ç–∑—ã–≤—ã –æ –≤–∞—Å:</b> (0)üëç (0)üëé\n\n<b>–î–Ω–µ–π –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ:</b> ${diffInDays}\n<b>–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ —É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> ${
								contractTransactions.length
							} –Ω–∞ —Å—É–º–º—É ${contractTransactions.reduce(
								(currentSum, currentTransaction) =>
									currentSum + currentTransaction.amount,
								0
							)} BTC\n<b>–í—ã –∑–∞—â–∏—â–µ–Ω—ã –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –æ—Ç –≤–∑–ª–æ–º–∞ –∏ –∫—Ä–∞–∂–∏ –≤–∞—à–∏—Ö BTC.</b>`,
							{
								parse_mode: 'HTML',

								reply_markup: {
									inline_keyboard: [
										...walletInlineKeyboard,
										[
											...previousButton('main_menu'),
											{
												callback_data: 'history_transfer',
												text: '‚è±Ô∏è –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤',
											},
										],
									],
								},
							}
						)
					} catch (error) {
						console.error(error)
						return query.reply(String(error))
					}
			}
			const matchRequisite = data.match(/^requisite_(\d+)$/)
			const matchSellPaymentMethod = data.match(/^sell_payment_method_(\d+)$/)
			const matchBuyPaymentMethod = data.match(/^buy_payment_method_(\d+)$/)
			const matchDeleteRequisite = data.match(/^delete_requisite_(\d+)$/)
			const matchSelfContract = data.match(/^contract-item-(\d+)$/)
			const matchSellContract = data.match(/^sell_contract_(\d+)$/)
			const matchBuyContract = data.match(/^buy_contract_(\d+)$/)
			const matchPaymentContract = data.match(/^payment-contract-(\d+)$/)
			const matchDeleteContract = data.match(/^delete-contract-(\d+)$/)
			const matchSendMessageTo = data.match(/^send-message-(\d+)$/)
			const matchPaymentSuccessful = data.match(/^payment-successful-(\d+)$/)
			const matchCancelContract = data.match(/^cancel-contract-(\d+)$/)
			const matchContactAddress = data.match(/^address-contact-(\d+)$/)
			const matchDeleteContactAddress = data.match(/^delete-contact-(\d+)$/)
			if (matchDeleteContactAddress) {
				const itemId = Number(matchDeleteContactAddress[1])
				await prisma.addressBook
					.delete({
						where: {
							id: itemId,
						},
					})
					.then(response => {
						return query.editMessageText(`–ö–æ–Ω—Ç–∞–∫—Ç ${response.name} —É–¥–∞–ª–µ–Ω`, {
							reply_markup: {
								inline_keyboard: [previousButton('contacts_note')],
							},
						})
					})
			}
			if (matchContactAddress) {
				matchContactAddress
				const itemId = Number(matchContactAddress[1])
				const contact = await prisma.addressBook.findFirst({
					where: {
						id: itemId,
					},
				})
				return query.editMessageText(
					`<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞:</b> ${contact?.name}\n\n<b>–ú–æ–Ω–µ—Ç–∞:</b> BTC\n<b>–ê–¥—Ä–µ—Å:</b> <code>${contact?.address}</code>`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										callback_data: `delete-contact-${contact?.id}`,
										text: '–£–¥–∞–ª–∏—Ç—å',
									},
								],
								previousButton('contacts_note'),
							],
						},
					}
				)
			}
			if (matchBuyContract) {
				const itemId = Number(matchBuyContract[1])
				// @ts-ignore
				query.scene.state.contractId = itemId
				await prisma.contract
					.findFirst({
						where: {
							id: itemId,
						},
						include: {
							author: {
								include: {
									SellerContractTransaction: true,
									toTransfers: true,
								},
							},
							paymentMethod: true,
						},
					})
					.then(async response => {
						const buttonText = response?.type === 'buy' ? '–ü—Ä–æ–¥–∞—Ç—å' : '–ö—É–ø–∏—Ç—å'

						return query.editMessageText(
							`üìú ID: #${response?.code}\n\n–¶–µ–Ω–∞ –∑–∞ 1 BTC: ${currencyFormatter(
								response?.amount!,
								response?.currency!
							)}\n–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: 0%\n\n–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–¥–µ–ª–∫–∏: 15 –º–∏–Ω—É—Ç\n\n–¢—Ä–µ–π–¥–µ—Ä: @${
								response?.author.login
							}\n–†–µ–ø—É—Ç–∞—Ü–∏—è: 100%\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚úîÔ∏è\n–û—Ç–∑—ã–≤—ã: üòä(0) üôÅ(0)\n\n–ü—Ä–æ–≤–µ–ª —Å–¥–µ–ª–æ–∫: ${
								response?.author.toTransfers.length
							}\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${dateFormat(
								response?.author.createdAt!
							)}\n\n–£—Å–ª–æ–≤–∏—è:\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - ${currencyFormatter(
								response!.price!,
								response?.currency!
							)}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - ${currencyFormatter(
								response!.maxPrice!,
								response?.currency!
							)}`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: [
										[
											{
												callback_data: `buy_contract`,
												text: `‚úÖ ${buttonText}`,
											},
										],
										previousButton('sell'),
									],
								},
							}
						)
					})
			}
			if (matchCancelContract) {
				const itemId = Number(matchCancelContract[1])

				const transaction = await prisma.user.findFirst({
					where: {
						id: itemId.toString(),
					},
					include: {
						SellerContractTransaction: true,
					},
				})
				if (transaction?.SellerContractTransaction) {
					await prisma.contractTransaction.delete({
						where: {
							id: transaction.SellerContractTransaction.id,
						},
					})
					await query.reply(
						`–°–¥–µ–ª–∫–∞ #${transaction.SellerContractTransaction.code} –æ—Ç–º–µ–Ω–µ–Ω–∞`
					)
					await query.telegram.sendMessage(
						Number(transaction.SellerContractTransaction.buyerId),
						`–°–¥–µ–ª–∫–∞ #${transaction.SellerContractTransaction.code} –æ—Ç–º–µ–Ω–µ–Ω–∞`
					)
					return
				}
				return
			}
			if (matchPaymentSuccessful) {
				const itemId = Number(matchPaymentSuccessful[1])
				const transaction = await prisma.contractTransaction.findFirst({
					where: {
						buyerId: itemId.toString(),
					},
					include: {
						buyer: {
							include: {
								wallet: true,
							},
						},
						seller: true,
					},
				})
				if (transaction) {
					const coins = await currencyService.convertRubleToBTC(
						transaction.amount
					)
					await prisma.contractTransaction.delete({
						where: {
							buyerId: itemId.toString(),
						},
					})
					await query.telegram.sendMessage(
						itemId,
						`–ü—Ä–æ–¥–∞–≤–µ—Ü @${
							transaction.seller!.login
						} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ —Å–¥–µ–ª–∫–µ #${
							transaction.code
						}, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è ${coins} BTC –Ω–∞ –≤–∞—à —Å—á–µ—Ç`
					)
					await query.reply(
						`–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, ${coins} BTC –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${
							transaction.buyer!.login
						}`
					)
					sendCoin(
						Number(transaction.sellerId),
						transaction.buyer?.wallet?.address!,
						Number(coins),
						Networks.mainnet
					)
				}
			}
			if (matchPaymentContract) {
				const itemId = Number(matchPaymentContract[1])
				const user = await prisma.user.findFirst({
					where: {
						id: itemId.toString(),
					},
					include: {
						BuyerContractTransaction: {
							include: {
								contract: true,
							},
						},
					},
				})
				await query.telegram.sendMessage(
					user?.BuyerContractTransaction?.sellerId!,
					`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${user?.login} –ø—Ä–æ–∏–∑–≤–µ–ª –æ–ø–ª–∞—Ç—É –ø–æ —Å–¥–µ–ª–∫–µ #${user?.BuyerContractTransaction?.code}`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										callback_data: `payment-successful-${user?.BuyerContractTransaction?.buyerId}`,
										text: '‚úÖ –î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã',
									},
									{
										callback_data: `send-message-${user?.BuyerContractTransaction?.buyerId}`,
										text: '‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å',
									},
								],
							],
						},
					}
				)
			}
			if (matchSendMessageTo) {
				const itemId = Number(matchSendMessageTo[1])
				return query.scene.enter('send_message', {
					id: itemId,
				})
			}
			if (matchSellContract) {
				const itemId = Number(matchSellContract[1])
				// @ts-ignore
				query.scene.state.contractId = itemId
				await prisma.contract
					.findFirst({
						where: {
							id: itemId,
						},
						include: {
							author: {
								include: {
									SellerContractTransaction: true,
									toTransfers: true,
								},
							},
							paymentMethod: true,
						},
					})
					.then(async response => {
						const buttonText = response?.type === 'buy' ? '–ü—Ä–æ–¥–∞—Ç—å' : '–ö—É–ø–∏—Ç—å'

						return query.editMessageText(
							`üìú ID: #${response?.code}\n\n–¶–µ–Ω–∞ –∑–∞ 1 BTC: ${currencyFormatter(
								response?.amount!,
								response?.currency!
							)}\n–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: 0%\n\n–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–¥–µ–ª–∫–∏: 15 –º–∏–Ω—É—Ç\n\n–¢—Ä–µ–π–¥–µ—Ä: @${
								response?.author.login
							}\n–†–µ–ø—É—Ç–∞—Ü–∏—è: 100%\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚úîÔ∏è\n–û—Ç–∑—ã–≤—ã: üòä(0) üôÅ(0)\n\n–ü—Ä–æ–≤–µ–ª —Å–¥–µ–ª–æ–∫: ${
								response?.author.toTransfers.length
							}\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${dateFormat(
								response?.author.createdAt!
							)}\n\n–£—Å–ª–æ–≤–∏—è:\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - ${currencyFormatter(
								response!.price!,
								response?.currency!
							)}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - ${currencyFormatter(
								response!.maxPrice!,
								response?.currency!
							)}`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: [
										[
											{
												callback_data: `buy_contract`,
												text: `‚úÖ ${buttonText}`,
											},
										],
										previousButton('sell'),
									],
								},
							}
						)
					})
			}
			if (matchDeleteRequisite) {
				const itemId = Number(matchDeleteRequisite[1])
				await prisma.requisite.delete({
					where: {
						id: itemId,
					},
				})
				await query.editMessageText(`–†–µ–∫–≤–∏–∑–∏—Ç—ã —É–¥–∞–ª–µ–Ω—ã.`, {
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [previousButton('requisites')],
					},
				})
			}
			if (matchDeleteContract) {
				const itemId = Number(matchDeleteContract[1])
				await prisma.contract
					.delete({
						where: {
							id: itemId,
						},
					})
					.then(res => {
						return query.editMessageText(`–ó–∞—è–≤–∫–∞ <a>#${res.id}</a> —É–¥–∞–ª–µ–Ω–∞`, {
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [previousButton('my_ads')],
							},
						})
					})
			}
			if (matchSellPaymentMethod) {
				const itemId = Number(matchSellPaymentMethod[1])
				const user = await prisma.user.findFirst({
					where: {
						id: query.from.id.toString(),
					},
					include: {
						Requisite: {
							include: {
								paymentMethod: true,
							},
						},
					},
				})
				const paymentMethod = await prisma.paymentMethod.findFirst({
					where: {
						id: itemId,
					},
				})
				if (
					user?.Requisite.find(
						requisite => requisite.paymentMethod.id === paymentMethod?.id
					)
				) {
					const contracts = await prisma.contract.findMany({
						where: {
							paymentMethodId: paymentMethod?.id,
							type: 'sell',
						},
						include: {
							author: true,
						},
					})
					const contractsButtons: InlineKeyboardButton[][] = contracts.map(
						contract => {
							return [
								{
									callback_data: `sell_contract_${contract.id}`,
									text: `${contract.author.username} | ${currencyFormatter(
										contract.amount,
										contract.currency!
									)} | ${currencyFormatter(
										contract.price,
										contract.currency!
									)} - ${currencyFormatter(
										contract.maxPrice!,
										contract.currency!
									)}`,
								},
							]
						}
					)
					return query.editMessageText(
						`üí≥ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å BTC –∑–∞ RUB —á–µ—Ä–µ–∑ ${paymentMethod?.name}.`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [...contractsButtons, previousButton('sell')],
							},
						}
					)
				}
				return query.answerCbQuery(
					'üö´ –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –±–∞–Ω–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏',
					{
						show_alert: true,
					}
				)
			}
			if (matchBuyPaymentMethod) {
				const itemId = Number(matchBuyPaymentMethod[1])
				const user = await prisma.user.findFirst({
					where: {
						id: query.from.id.toString(),
					},
					include: {
						Requisite: {
							include: {
								paymentMethod: true,
							},
						},
					},
				})
				const paymentMethod = await prisma.paymentMethod.findFirst({
					where: {
						id: itemId,
					},
				})
				if (
					user?.Requisite.find(
						requisite => requisite.paymentMethod.id === paymentMethod?.id
					)
				) {
					const contracts = await prisma.contract.findMany({
						where: {
							paymentMethodId: paymentMethod?.id,
							type: 'buy',
						},
						include: {
							author: true,
						},
					})
					const contractsButtons: InlineKeyboardButton[][] = contracts.map(
						contract => {
							return [
								{
									callback_data: `buy_contract_${contract.id}`,
									text: `${contract.author.username} | ${currencyFormatter(
										contract.amount,
										contract.currency!
									)} | ${currencyFormatter(
										contract.price,
										contract.currency!
									)} - ${currencyFormatter(
										contract.maxPrice!,
										contract.currency!
									)}`,
								},
							]
						}
					)
					return query.editMessageText(
						`üí≥ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å BTC –∑–∞ RUB —á–µ—Ä–µ–∑ ${paymentMethod?.name}.`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [...contractsButtons, previousButton('buy')],
							},
						}
					)
				}
				return query.answerCbQuery(
					'üö´ –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –±–∞–Ω–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏',
					{
						show_alert: true,
					}
				)
			}
			if (matchSelfContract) {
				const itemId = Number(matchSelfContract[1])
				const course = await currencyService.getCurrency('bitcoin')
				await prisma.contract
					.findFirst({
						where: {
							id: itemId,
						},
						include: {
							paymentMethod: true,
						},
					})
					.then(res => {
						return query.editMessageText(
							`üì∞ –ó–∞—è–≤–∫–∞ <a>#${res?.id}</a>\n\n<b>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:</b> ${
								res?.paymentMethod.name
							}\n<b>–ö—É—Ä—Å 1 BTC: </b>${currencyFormatter(
								course?.bitcoin.rub!,
								'rub'
							)}\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> ${res?.price} ${
								res?.currency
							}\n<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> ${res?.maxPrice} ${res?.currency}`,
							{
								parse_mode: 'HTML',

								reply_markup: {
									inline_keyboard: [
										[
											{
												callback_data: `delete-contract-${res?.id}`,
												text: '‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç',
											},
										],
										[...previousButton('my_ads')],
									],
								},
							}
						)
					})
			}
			if (matchRequisite) {
				const itemId = matchRequisite[1]
				const requisite = await prisma.requisite.findFirst({
					where: {
						id: Number(itemId),
					},
					include: {
						paymentMethod: true,
					},
				})
				// –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∞—à–∏–º itemId
				if (requisite) {
					await query.editMessageText(
						`<b>–ü–ª–∞—Ç—ë–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>\n\n–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: <code>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥</code>\n–í–∞–ª—é—Ç–∞: <code>${requisite.currency}</code>\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <code>${requisite.paymentMethod.name}</code>\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>${requisite.phoneOrbankCardNumber}</code>`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [
									[
										{
											callback_data: `delete_requisite_${requisite.id}`,
											text: '‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã',
										},
									],
									previousButton('requisites'),
								],
							},
						}
					)
				}
			}
		} catch (error) {
			console.log(error)
			return query.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
		}
	})
}
