import cron from 'node-cron'
import { Scenes } from 'telegraf'
import { WizardContext } from 'telegraf/typings/scenes'
import { prisma } from '../prisma/prisma.client'
import { currencyFormatter } from '../utils/currency-formatter'
import { dateFormat } from '../utils/format-date'

const sendBuyAmount = async (ctx: WizardContext) => {
	try {
		const userTransactions = await prisma.contractTransaction.findFirst({
			where: {
				buyerId: ctx.from?.id.toString()!,
			},
		})
		if (userTransactions) {
			await ctx.reply(
				'–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è. –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.'
			)
			return ctx.scene.leave()
		}
		const contract = await prisma.contract.findFirst({
			where: {
				// @ts-ignore
				id: ctx.wizard.state.id,
			},
			include: {
				author: {
					include: {
						SellerContractTransaction: true,
					},
				},
				paymentMethod: {
					include: {
						Requisite: true,
					},
				},
			},
		})
		const currentMethod = contract?.paymentMethod.Requisite.filter(
			requisite => requisite.paymentMethodId !== contract.paymentMethod.id
		)
		console.log(currentMethod)
		ctx.scene.state = {}
		// @ts-ignore
		ctx.scene.state.contract = JSON.stringify(contract)
		// @ts-ignore
		const currentContract = ctx.scene.state.contract

		await ctx.reply(
			`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ ${contract?.currency?.toUpperCase()} –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - ${currencyFormatter(
				// @ts-ignore
				contract?.price!,
				// @ts-ignore
				contract?.currency!
			)}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - ${currencyFormatter(
				// @ts-ignore
				contract?.maxPrice!,
				// @ts-ignore
				contract?.currency!
			)}`,
			{
				parse_mode: 'HTML',
			}
		)
		return ctx.wizard.next()
	} catch (error) {
		console.log(error)
		ctx.scene.leave()
		return ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
	}
}

const doneContract = async (ctx: WizardContext) => {
	try {
		// @ts-ignore
		const contract = JSON.parse(ctx.scene.state.contract)
		const sendPrice = parseInt(ctx.text!)
		if (sendPrice < contract.price || sendPrice > contract.maxPrice) {
			await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.')
			ctx.wizard.back()
			return sendBuyAmount(ctx)
		} else {
			await prisma.contractTransaction
				.create({
					data: {
						buyerId: ctx.from?.id.toString()!,
						sellerId: contract.author.id,
						amount: sendPrice,
						contractId: contract.id,
					},
				})
				.then(async response => {
					const transaction = await prisma.contractTransaction.findFirst({
						where: {
							id: response.id,
						},
					})
					if (transaction) {
						const taskNotifyForUsers = cron.schedule(
							'* 12 * * * *',
							async () => {
								await ctx.telegram.sendMessage(
									Number(response.buyerId),
									`‚ùóÔ∏è –î–æ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å 3 –º–∏–Ω—É—Ç—ã. –ü–æ—Å–ø–µ—à–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë`
								)
								await ctx.telegram.sendMessage(
									Number(response.sellerId),
									`‚ùóÔ∏è –î–æ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å 3 –º–∏–Ω—É—Ç—ã. –ü–æ—Å–ø–µ—à–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë`
								)
								taskNotifyForUsers.stop()
							}
						)
						const taskDeleteTransaction = cron.schedule(
							'* 15 * * * *',
							async () => {
								await prisma.contractTransaction.delete({
									where: {
										id: response.id,
									},
								})
								taskDeleteTransaction.stop()
							}
						)
						return
					}
				})
			await ctx.reply(
				`üìú –°–¥–µ–ª–∫–∞ #${
					contract?.code
				} –∑–∞–∫–ª—é—á–µ–Ω–∞\n\n–¶–µ–Ω–∞ –∑–∞ 1 BTC: ${currencyFormatter(
					contract?.amount!,
					contract?.currency!
				)}\n–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: 0%\n\n–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–¥–µ–ª–∫–∏: 15 –º–∏–Ω—É—Ç\n\n–¢—Ä–µ–π–¥–µ—Ä: @${
					contract?.author.login
				}\n–†–µ–ø—É—Ç–∞—Ü–∏—è: 100%\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚úîÔ∏è\n–û—Ç–∑—ã–≤—ã: üòä(0) üôÅ(0)\n\n–ü—Ä–æ–≤–µ–ª —Å–¥–µ–ª–æ–∫: 0\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${dateFormat(
					contract?.author.createdAt!
				)}\n\n–£—Å–ª–æ–≤–∏—è:\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - ${currencyFormatter(
					contract!.price!,
					contract?.currency!
				)}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - ${currencyFormatter(
					contract!.maxPrice!,
					contract?.currency!
				)}`,
				{
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[
								{
									callback_data: `cancel-contract-${contract.author.id}`,
									text: 'üö´ –û—Ç–º–µ–Ω–∞',
								},
								{
									callback_data: `send-message-${contract.author.id}`,
									text: '–û—Ç–≤–µ—Ç–∏—Ç—å',
								},
							],
						],
					},
				}
			)
			// 		await ctx.reply(
			// 			`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞ @${contract.author.login}
			// –°–¥–µ–ª–∫–∞ #${contract.code}
			// –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã
			// –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ BTC –Ω–∞ —Å—É–º–º—É ${currencyFormatter(
			// 				sendPrice,
			// 				contract.currency
			// 			)} —á–µ—Ä–µ–∑ ${contract?.paymentMethod.name}\n\n---------------------------
			// –ê–ª—å—Ñ–∞–ë–∞–Ω–∫ 2200 1523 4720 9515 , –°–ë–ï–† 2202 2023 9388 7116 , –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê.–ü. –ö–æ–º–µ–Ω—Ç : –í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞
			// ---------------------------\n‚ùóÔ∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è!`,
			// 			{
			// 				parse_mode: 'HTML',
			// 				reply_markup: {
			// 					inline_keyboard: [
			// 						[
			// 							{
			// 								callback_data: 'cancel-buy-contract',
			// 								text: 'üö´ –û—Ç–º–µ–Ω–∞',
			// 							},
			// 							{
			// 								callback_data: 'send-message',
			// 								text: '–û—Ç–≤–µ—Ç–∏—Ç—å',
			// 							},
			// 						],
			// 						[
			// 							{
			// 								callback_data: 'pay-successful',
			// 								text: '‚úÖ –û–ø–ª–∞—Ç–∏–ª',
			// 							},
			// 						],
			// 					],
			// 				},
			// 			}
			// 		)
			ctx.telegram.sendMessage(
				contract.author.id,
				`–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ ${
					contract.type === 'buy' ? '–ø—Ä–æ–¥–∞–∂–µ' : '–ø–æ–∫—É–ø–∫–µ'
				} –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é #${contract.code}\n\n–ü–æ–∫—É–ø–∞–µ—Ç @${
					ctx.from?.username
				}\nBTC –Ω–∞ —Å—É–º–º—É ${currencyFormatter(sendPrice, contract.currency)}`,
				{
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[
								{
									callback_data: `send-message-${ctx.from?.id}`,
									text: '‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å',
								},
							],
						],
					},
				}
			)
		}
		ctx.scene.state = {}
		return ctx.scene.leave()
	} catch (error) {
		console.log(error)
		ctx.scene.leave()
		return ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
	}
}

export const BuyContract = new Scenes.WizardScene<WizardContext>(
	'buy-contract',
	sendBuyAmount,
	doneContract
)
