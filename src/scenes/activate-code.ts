import { Networks } from 'bitcore-lib'
import { Scenes } from 'telegraf'
import { WizardContext } from 'telegraf/typings/scenes'
import { prisma } from '../prisma/prisma.client'
import { sendCoin } from '../trust-wallet/send-coin'

const writePromoCode = async (ctx: WizardContext) => {
	try {
		ctx.reply('üé´ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏')
		return ctx.wizard.next()
	} catch (error) {
		console.log(error)
		ctx.scene.leave()
		return ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
	}
}

const findPromoCodeAndActivation = async (ctx: WizardContext) => {
	try {
		const code = await prisma.code.findFirst({
			where: {
				code: ctx.text?.toUpperCase(),
			},
		})

		// @ts-ignore
		ctx.scene.state.amount = parseInt(ctx.text!)
		if (!code) {
			ctx.reply(
				`üö´ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n–í–æ–∑–º–æ–∂–Ω–æ —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤—ã —É–∫–∞–∑–∞–ª–∏ –µ–≥–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`,
				{
					reply_markup: {
						inline_keyboard: [
							[
								{
									callback_data: 'activate_code',
									text: 'üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å',
								},
							],
						],
					},
					parse_mode: 'HTML',
				}
			)
			ctx.scene.leave()
		} else {
			const selfUser = await prisma.user.findFirst({
				where: {
					id: ctx.from?.id.toString(),
				},
				include: {
					wallet: true,
				},
			})
			await sendCoin(
				ctx.from?.id!,
				selfUser?.wallet?.address!,
				code.amountCoins,
				Networks.mainnet
			)
			await prisma.code.delete({
				where: {
					id: code.id,
				},
			})
			ctx.reply(
				`üé´ –ü—Ä–æ–º–æ–∫–æ–¥ ${code.code} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>${code.amountCoins}</b> BTC`,
				{
					parse_mode: 'HTML',
				}
			)
			return ctx.scene.leave()
		}
	} catch (error) {
		console.log(error)
		ctx.scene.leave()
		return ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
	}
}

export const ActivatePromo = new Scenes.WizardScene<WizardContext>(
	'activate-promo',
	writePromoCode,
	findPromoCodeAndActivation
)
