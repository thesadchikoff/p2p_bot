"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuyContract = void 0;
const node_cron_1 = require("node-cron");
const telegraf_1 = require("telegraf");
const prisma_client_1 = require("../prisma/prisma.client");
const currency_formatter_1 = require("../utils/currency-formatter");
const format_date_1 = require("../utils/format-date");
const sendBuyAmount = (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    try {
        const userTransactions = yield prisma_client_1.prisma.contractTransaction.findFirst({
            where: {
                buyerId: (_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id.toString(),
            },
        });
        if (userTransactions) {
            yield ctx.reply('–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è. –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.');
            return ctx.scene.leave();
        }
        const contract = yield prisma_client_1.prisma.contract.findFirst({
            where: {
                // @ts-ignore
                id: ctx.wizard.state.id,
            },
            include: {
                author: {
                    include: {
                        SellerContractTransaction: true,
                    },
                },
                paymentMethod: {
                    include: {
                        Requisite: true,
                    },
                },
            },
        });
        const currentMethod = contract === null || contract === void 0 ? void 0 : contract.paymentMethod.Requisite.filter(requisite => requisite.paymentMethodId !== contract.paymentMethod.id);
        console.log(currentMethod);
        ctx.scene.state = {};
        // @ts-ignore
        ctx.scene.state.contract = JSON.stringify(contract);
        // @ts-ignore
        const currentContract = ctx.scene.state.contract;
        yield ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ ${(_b = contract === null || contract === void 0 ? void 0 : contract.currency) === null || _b === void 0 ? void 0 : _b.toUpperCase()} –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - ${(0, currency_formatter_1.currencyFormatter)(
        // @ts-ignore
        contract === null || contract === void 0 ? void 0 : contract.price, 
        // @ts-ignore
        contract === null || contract === void 0 ? void 0 : contract.currency)}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - ${(0, currency_formatter_1.currencyFormatter)(
        // @ts-ignore
        contract === null || contract === void 0 ? void 0 : contract.maxPrice, 
        // @ts-ignore
        contract === null || contract === void 0 ? void 0 : contract.currency)}`, {
            parse_mode: 'HTML',
        });
        return ctx.wizard.next();
    }
    catch (error) {
        console.log(error);
        ctx.scene.leave();
        return ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
});
const doneContract = (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _c, _d, _e;
    try {
        // @ts-ignore
        const contract = JSON.parse(ctx.scene.state.contract);
        const sendPrice = parseInt(ctx.text);
        if (sendPrice < contract.price || sendPrice > contract.maxPrice) {
            yield ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.');
            ctx.wizard.back();
            return sendBuyAmount(ctx);
        }
        else {
            yield prisma_client_1.prisma.contractTransaction
                .create({
                data: {
                    buyerId: (_c = ctx.from) === null || _c === void 0 ? void 0 : _c.id.toString(),
                    sellerId: contract.author.id,
                    amount: sendPrice,
                    contractId: contract.id,
                },
            })
                .then((response) => __awaiter(void 0, void 0, void 0, function* () {
                const transaction = yield prisma_client_1.prisma.contractTransaction.findFirst({
                    where: {
                        id: response.id,
                    },
                });
                if (transaction) {
                    const taskNotifyForUsers = node_cron_1.default.schedule('* 12 * * * *', () => __awaiter(void 0, void 0, void 0, function* () {
                        yield ctx.telegram.sendMessage(Number(response.buyerId), `‚ùóÔ∏è –î–æ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å 3 –º–∏–Ω—É—Ç—ã. –ü–æ—Å–ø–µ—à–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë`);
                        yield ctx.telegram.sendMessage(Number(response.sellerId), `‚ùóÔ∏è –î–æ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å 3 –º–∏–Ω—É—Ç—ã. –ü–æ—Å–ø–µ—à–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë`);
                        taskNotifyForUsers.stop();
                    }));
                    const taskDeleteTransaction = node_cron_1.default.schedule('* 15 * * * *', () => __awaiter(void 0, void 0, void 0, function* () {
                        yield prisma_client_1.prisma.contractTransaction.delete({
                            where: {
                                id: response.id,
                            },
                        });
                        taskDeleteTransaction.stop();
                    }));
                    return;
                }
            }));
            yield ctx.reply(`üìú –°–¥–µ–ª–∫–∞ #${contract === null || contract === void 0 ? void 0 : contract.code} –∑–∞–∫–ª—é—á–µ–Ω–∞\n\n–¶–µ–Ω–∞ –∑–∞ 1 BTC: ${(0, currency_formatter_1.currencyFormatter)(contract === null || contract === void 0 ? void 0 : contract.amount, contract === null || contract === void 0 ? void 0 : contract.currency)}\n–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: 0%\n\n–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–¥–µ–ª–∫–∏: 15 –º–∏–Ω—É—Ç\n\n–¢—Ä–µ–π–¥–µ—Ä: @${contract === null || contract === void 0 ? void 0 : contract.author.login}\n–†–µ–ø—É—Ç–∞—Ü–∏—è: 100%\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚úîÔ∏è\n–û—Ç–∑—ã–≤—ã: üòä(0) üôÅ(0)\n\n–ü—Ä–æ–≤–µ–ª —Å–¥–µ–ª–æ–∫: 0\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${(0, format_date_1.dateFormat)(contract === null || contract === void 0 ? void 0 : contract.author.createdAt)}\n\n–£—Å–ª–æ–≤–∏—è:\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - ${(0, currency_formatter_1.currencyFormatter)(contract.price, contract === null || contract === void 0 ? void 0 : contract.currency)}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - ${(0, currency_formatter_1.currencyFormatter)(contract.maxPrice, contract === null || contract === void 0 ? void 0 : contract.currency)}`, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                callback_data: `cancel-contract-${contract.author.id}`,
                                text: 'üö´ –û—Ç–º–µ–Ω–∞',
                            },
                            {
                                callback_data: `send-message-${contract.author.id}`,
                                text: '–û—Ç–≤–µ—Ç–∏—Ç—å',
                            },
                        ],
                    ],
                },
            });
            // 		await ctx.reply(
            // 			`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞ @${contract.author.login}
            // –°–¥–µ–ª–∫–∞ #${contract.code}
            // –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã
            // –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ BTC –Ω–∞ —Å—É–º–º—É ${currencyFormatter(
            // 				sendPrice,
            // 				contract.currency
            // 			)} —á–µ—Ä–µ–∑ ${contract?.paymentMethod.name}\n\n---------------------------
            // –ê–ª—å—Ñ–∞–ë–∞–Ω–∫ 2200 1523 4720 9515 , –°–ë–ï–† 2202 2023 9388 7116 , –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê.–ü. –ö–æ–º–µ–Ω—Ç : –í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞
            // ---------------------------\n‚ùóÔ∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è!`,
            // 			{
            // 				parse_mode: 'HTML',
            // 				reply_markup: {
            // 					inline_keyboard: [
            // 						[
            // 							{
            // 								callback_data: 'cancel-buy-contract',
            // 								text: 'üö´ –û—Ç–º–µ–Ω–∞',
            // 							},
            // 							{
            // 								callback_data: 'send-message',
            // 								text: '–û—Ç–≤–µ—Ç–∏—Ç—å',
            // 							},
            // 						],
            // 						[
            // 							{
            // 								callback_data: 'pay-successful',
            // 								text: '‚úÖ –û–ø–ª–∞—Ç–∏–ª',
            // 							},
            // 						],
            // 					],
            // 				},
            // 			}
            // 		)
            ctx.telegram.sendMessage(contract.author.id, `–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ ${contract.type === 'buy' ? '–ø—Ä–æ–¥–∞–∂–µ' : '–ø–æ–∫—É–ø–∫–µ'} –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é #${contract.code}\n\n–ü–æ–∫—É–ø–∞–µ—Ç @${(_d = ctx.from) === null || _d === void 0 ? void 0 : _d.username}\nBTC –Ω–∞ —Å—É–º–º—É ${(0, currency_formatter_1.currencyFormatter)(sendPrice, contract.currency)}`, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                callback_data: `send-message-${(_e = ctx.from) === null || _e === void 0 ? void 0 : _e.id}`,
                                text: '‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å',
                            },
                        ],
                    ],
                },
            });
        }
        ctx.scene.state = {};
        return ctx.scene.leave();
    }
    catch (error) {
        console.log(error);
        ctx.scene.leave();
        return ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
});
exports.BuyContract = new telegraf_1.Scenes.WizardScene('buy-contract', sendBuyAmount, doneContract);
